diff --git a/lib/datapacks.js b/lib/datapacks.js
index ec2d9e0d4e8681bb06bb52a6ac30780f3aeef1fd..5cddd5bc1c78069f61c96e440699db96d7fefc97 100644
--- a/lib/datapacks.js
+++ b/lib/datapacks.js
@@ -217,6 +217,11 @@ DataPacks.prototype.getStorageLimitExceededError = function() {
 DataPacks.prototype.runDataPackProcess = async function(dataPackData, options) {
     var self = this;
 
+    if (options.cancellationToken && options.cancellationToken.isCancellationRequested) {
+        VlocityUtils.warn('Detected cancellation requested. Skipping further job processing.');
+        throw new Error('Operation Cancelled');
+    }
+
     if (options && dataPackData && dataPackData.processData) {
 
         Object.keys(options).forEach(function(optionKey){
@@ -279,6 +284,11 @@ DataPacks.prototype.runDataPackProcess = async function(dataPackData, options) {
 
             let result = await self.makeApexPostRequest(self.dataPacksEndpoint(), dataPackData);
 
+            if (options.cancellationToken && options.cancellationToken.isCancellationRequested) {
+                VlocityUtils.warn('Detected cancellation requested. Skipping further job processing.');
+                return { VlocityDataPackId: dataPackId, message: 'Operation Cancelled', dataPackError: true, Status: 'Cancelled' };
+            }
+
             VlocityUtils.verbose('Result', result);
 
             if (!result) {
@@ -316,23 +326,24 @@ DataPacks.prototype.runDataPackProcess = async function(dataPackData, options) {
                 result.Total = 1;
             }
 
-            if (soloExportDataPackKey 
-                && (!options.maxDepth 
-                    || options.maxDepth == -1)
-                && (result.Finished > 0 
-                    && result.Status != "Ready" 
-                    && result.Status != "Error" 
-                    && !result.Async)) {
-                result.Status = "Complete";
-            } else if (!result.Async 
-                && dataPackData.processType == "Export" 
-                && result.Status == "InProgress"
-                && (!options.maxDepth 
-                    || options.maxDepth == -1)
-                && options.exportPacksMaxSize 
-                && (result.Total - startingExportSize) > options.exportPacksMaxSize) {
-                    result.Status = "Complete";
-            }
+            // Disable this as it causes dependencies to be ommited resulting in partial exports.
+            // if (soloExportDataPackKey 
+            //     && (!options.maxDepth 
+            //         || options.maxDepth == -1)
+            //     && (result.Finished > 0 
+            //         && result.Status != "Ready" 
+            //         && result.Status != "Error" 
+            //         && !result.Async)) {
+            //     result.Status = "Complete";
+            // } else if (!result.Async 
+            //     && dataPackData.processType == "Export" 
+            //     && result.Status == "InProgress"
+            //     && (!options.maxDepth 
+            //         || options.maxDepth == -1)
+            //     && options.exportPacksMaxSize 
+            //     && (result.Total - startingExportSize) > options.exportPacksMaxSize) {
+            //         result.Status = "Complete";
+            // }
 
             if (result.Total > 0 && result.Async && result.Total == result.Finished) {
                 result.Finished--;
diff --git a/lib/datapacksbuilder.js b/lib/datapacksbuilder.js
index 1e72fcbdb82fdec4fd5d8c35a5aac32c0330696b..e595cabbe84bcd252f66f73ec6206cc335067e2b 100644
--- a/lib/datapacksbuilder.js
+++ b/lib/datapacksbuilder.js
@@ -1,7 +1,6 @@
-var yaml = require('js-yaml');
 var path = require('path');
 var fs = require('fs-extra');
-var sass = require('sass.js');
+var sass = null;
 var stringify = require('fast-json-stable-stringify');
 
 var UTF8_EXTENSIONS = [ "css", "json", "yaml", "scss", "html", "js", "xml"];
@@ -14,7 +13,7 @@ var DataPacksBuilder = module.exports = function(vlocity) {
 
     this.compileQueue = []; // array with files that require compilation
 
-    this.defaultdatapack = fs.readFileSync(path.join(__dirname, 'defaultdatapack.json'), 'utf8');
+    this.defaultdatapack = JSON.stringify(require('./defaultdatapack.json'));
 
     this.dataPackSizes = {};
 
@@ -240,10 +239,7 @@ DataPacksBuilder.prototype.buildImport = async function(importPath, jobInfo, val
 
         if (jobInfo.upgradeDataPackFields) {
             jobInfo.platformObjectMappings = this.vlocity.datapacksutils.updateExpandedDefinitionNamespace(
-                yaml.safeLoad(fs.readFileSync(
-                    path.join(__dirname, 'platformObjectMappings.yaml'),
-                    'utf8'
-                ))
+                require('./platformObjectMappings.yaml')
             );
             dataPackImport.dataPacks.forEach(dataPack => {
                 if (Object.keys(jobInfo.platformObjectMappings).includes(dataPack.VlocityDataPackType)) {
@@ -424,33 +420,52 @@ DataPacksBuilder.prototype.getFileData = function() {
 }
 
 DataPacksBuilder.prototype.setFileData = async function(filePath, encoding) {
-    var data = await fs.readFile(filePath, encoding);
+    //const data = await fs.readFile(filePath, encoding);
+    const fileKey = path.normalize(filePath).toLowerCase();
+    const isDatapackMeta = fileKey.endsWith('_datapack.json') || fileKey.endsWith('.json');
 
     if (!this.allFileDataMap) {
         this.allFileDataMap = {};
     }
 
-    this.allFileDataMap[path.normalize(filePath).toLowerCase()] = data;
-
-    try {
-        var dataPack = JSON.parse(data);
-
-        if (dataPack) {
-            if (!this.recordSourceKeyToFilePath) {
-                this.recordSourceKeyToFilePath = {};
+    // Define transparent lazy property on the all file datamap
+    Object.defineProperty(this.allFileDataMap, fileKey, {
+        get() {
+            // Initlize lazy loader cache on allFileDataMap obj
+            const cache = this['__cache'] || (this['__cache'] = new Map());
+            let fileData = cache.get(fileKey);
+            if (!fileData) {
+                // Ideally we make this an async function but for now
+                // keep it sync for simplicty and backawrd compaitiblity
+                fileData = fs.readFileSync(filePath, encoding);
+                cache.set(fileKey, fileData);
             }
+            return fileData;
+        }
+    });
             
-            if (dataPack instanceof Array) {
-                for (data of dataPack) {
-                    if (data.VlocityRecordSourceKey) {
-                        this.recordSourceKeyToFilePath[data.VlocityRecordSourceKey] = path.normalize(filePath);    
+    if (isDatapackMeta) {
+        try {
+            var dataPack = JSON.parse(this.allFileDataMap[fileKey]);
+            if (dataPack) {
+                if (!this.recordSourceKeyToFilePath) {
+                    this.recordSourceKeyToFilePath = {};
+                }
+                
+                if (dataPack instanceof Array) {
+                    for (data of dataPack) {
+                        if (data.VlocityRecordSourceKey) {
+                            this.recordSourceKeyToFilePath[data.VlocityRecordSourceKey] = path.normalize(filePath);    
+                        }   
                     }   
+                } else if (dataPack.VlocityRecordSourceKey){
+                    this.recordSourceKeyToFilePath[dataPack.VlocityRecordSourceKey] = path.normalize(filePath);
                 }
-            } else if (dataPack.VlocityRecordSourceKey){
-                this.recordSourceKeyToFilePath[dataPack.VlocityRecordSourceKey] = path.normalize(filePath);
             }
+        } catch (e) {
+            VlocityUtils.error(`Unable to parse ${path.basename(filePath)} >> ${e.message || e}`);
         }
-    } catch (e) {}
+    }
 }
 
 DataPacksBuilder.prototype.loadFilesAtPath = async function(srcpath, jobInfo, dataPackKey) {
@@ -1304,6 +1319,11 @@ DataPacksBuilder.prototype.compile = function(lang, source, options, cb) {
     // add addtional languages here to support more compilation types    
     switch(lang) {
         case 'scss': {
+            // Lazy load SASS module; sass module is rather heavy; lazy loading it has a benefit
+            // as to not load the full 3MB JS code up front but instead only when required for the first time 
+            // by our datapack builder
+            sass = (sass || require('sass.js'));
+
             // intercept file loading requests from libsass
             sass.importer((request, done) => {
                 // (object) request
diff --git a/lib/datapackserrorhandling.js b/lib/datapackserrorhandling.js
index 26cb86f197545328a8a2a4eeb718c15c6f14d696..cae74648d3a4cb3a798d03cfac7163a687f09d2d 100644
--- a/lib/datapackserrorhandling.js
+++ b/lib/datapackserrorhandling.js
@@ -1,10 +1,6 @@
-var fs = require("fs-extra");
-var path = require('path');
-var yaml = require('js-yaml');
-
 var DataPacksErrorHandling = module.exports = function(vlocity) {
     this.vlocity = vlocity || {};
-    this.errorHandlingDefinition = yaml.safeLoad(fs.readFileSync(path.join(__dirname, "datapackserrorhandling.yaml"), 'utf8'));
+    this.errorHandlingDefinition =  require("./datapackserrorhandling.yaml");
 };
 
 DataPacksErrorHandling.prototype.getSanitizedErrorMessage = async function(jobInfo, dataPack) {
diff --git a/lib/datapacksjob.js b/lib/datapacksjob.js
index ec780e11be53057ae9e4f77e705f15a510cbe415..2243e948adce10378994a03ca50d7f40553ce1b5 100644
--- a/lib/datapacksjob.js
+++ b/lib/datapacksjob.js
@@ -9,8 +9,8 @@ const open = require("opn");
 var DataPacksJob = module.exports = function(vlocity) {
     this.vlocity = vlocity || {};
 
-    this.defaultJobSettings = yaml.safeLoad(fs.readFileSync(path.join(__dirname, 'defaultjobsettings.yaml'), 'utf8'));
-    this.queryDefinitions = yaml.safeLoad(fs.readFileSync(path.join(__dirname, 'querydefinition.yaml'), 'utf8'));
+    this.defaultJobSettings = require('./defaultjobsettings.yaml');
+    this.queryDefinitions = require('./querydefinition.yaml');
     this.runningParallel = {};
     this.vlocity.relationMap = new Map();
     this.vlocity.insertIndexToSfIdMap = new Map();
@@ -28,7 +28,8 @@ var SUPPORTED_JOB_KEY_TO_OPTION_MAP = {
     source: 'source',
     alreadyExportedKeys: 'alreadyExportedKeys',
     exportPacksMaxSize: 'exportPacksMaxSize',
-    useVlocityTriggers: 'useVlocityTriggers'
+    useVlocityTriggers: 'useVlocityTriggers',
+    cancellationToken: 'cancellationToken'
 };
 
 var MAX_PER_GROUP = 10;
@@ -1315,8 +1316,10 @@ DataPacksJob.prototype.exportGroup = async function(inputMap) {
             return false;
         }
 
-        VlocityUtils.success('Exporting', dataPack.VlocityDataPackType, this.vlocity.datapacksutils.getDisplayName(dataPack));
-
+        var name = this.vlocity.datapacksutils.getDisplayName(dataPack);
+        if (name) {
+            VlocityUtils.success('Exporting', dataPack.VlocityDataPackType, name);
+        }
         return true;
     });
 
@@ -2477,7 +2480,8 @@ DataPacksJob.prototype.deployPack = async function(inputMap) {
             throw e;
         }
 
-        VlocityUtils.error('Error', 'Deploying Pack', e.stack);
+        VlocityUtils.error('Error', 'Deploying Pack', e.stack || e);
+        throw e;
     }
 }
 
diff --git a/lib/datapacksutils.js b/lib/datapacksutils.js
index a96735c772a2e1dc790d295b0766aabfad95bb9e..da6781a7ddff213b400542c7845d71ee7880acfe 100644
--- a/lib/datapacksutils.js
+++ b/lib/datapacksutils.js
@@ -19,14 +19,14 @@ const namespaceFieldPrefix = '%' + namespacePrefix + '%__';
 
 var CURRENT_INFO_FILE;
 
-VLOCITY_BUILD_SALESFORCE_API_VERSION = '50.0';
+global.VLOCITY_BUILD_SALESFORCE_API_VERSION = '50.0';
 
 var DataPacksUtils = module.exports = function(vlocity) {
     this.vlocity = vlocity || {};
 
     CURRENT_INFO_FILE = path.join(vlocity.tempFolder, 'currentJobInfo.json');
 
-    this.dataPacksExpandedDefinition = yaml.safeLoad(fs.readFileSync(path.join(__dirname, 'datapacksexpanddefinition.yaml'), 'utf8'));
+    this.dataPacksExpandedDefinition = require('./datapacksexpanddefinition.yaml');
 
     this.runJavaScriptModules = {};
 
@@ -825,6 +825,7 @@ DataPacksUtils.prototype.loadApex = async function(projectPath, filePath) {
     var possiblePaths = [
         path.join(projectPath, filePath),
         path.join(__dirname, '..', 'apex', filePath),
+        path.join(__dirname, 'apex', filePath),
         filePath
     ];
 
@@ -1240,6 +1241,9 @@ DataPacksUtils.prototype.getDisplayName = function(dataPack) {
             dataPackKey = dataPack.VlocityDataPackKey.substring(dataPack.VlocityDataPackKey.indexOf('/') + 1);
         } else if (dataPack.VlocityDataPackKeyForManifest) {
             dataPackKey = dataPack.VlocityDataPackKeyForManifest.substring(dataPack.VlocityDataPackKeyForManifest.indexOf('/') + 1);
+            if (dataPackKey == 'null') {
+                dataPackKey = null;
+            }
         } else if (dataPack.VlocityRecordSourceKey) {
             dataPackKey = dataPack.VlocityRecordSourceKey.substring(dataPack.VlocityRecordSourceKey.indexOf('/') + 1);
         }
@@ -2537,7 +2541,7 @@ DataPacksUtils.prototype.printJobStatus = function(jobInfo, forceWrite) {
 DataPacksUtils.prototype.updateStatusIPC = function(logInfo) {
     let ipcRenderer;
     if ('electron' in process.versions) {
-        ipcRenderer = require('electron').ipcRenderer;
+        //ipcRenderer = require('electron').ipcRenderer;
     } else {
         return;
     }
diff --git a/lib/utilityservice.js b/lib/utilityservice.js
index 7b545d3b10f9da08d58654d7de09b0cb162af0f3..6be0020a90ec84368f7d2a3066654c8de6f52578 100644
--- a/lib/utilityservice.js
+++ b/lib/utilityservice.js
@@ -1,5 +1,4 @@
 var jsforce = require('jsforce');
-var yaml = require('js-yaml');
 var fs = require('fs-extra');
 var path = require('path');
 var stringify = require('fast-json-stable-stringify');
@@ -482,7 +481,7 @@ UtilityService.prototype.getPackageVersion = async function() {
     if (!this.vlocity.PackageVersion) {
         var result = await this.vlocity.jsForceConnection.query("SELECT DurableId, Id, IsSalesforce, MajorVersion, MinorVersion, Name, NamespacePrefix FROM Publisher where NamespacePrefix = \'" + this.vlocity.namespace + "\' LIMIT 1");
 
-        this.vlocity.buildToolsVersionSettings = yaml.safeLoad(fs.readFileSync(path.join(__dirname, "buildToolsVersionSettings.yaml"), 'utf8'));
+        this.vlocity.buildToolsVersionSettings = require('./buildToolsVersionSettings.yaml');
 
         this.vlocity.BuildToolSettingLatestVersion = this.vlocity.buildToolsVersionSettings.latest;
 
diff --git a/lib/validationtest.js b/lib/validationtest.js
index d85f750a81447c3a9a49df4d5729171571f82dc9..6d7ed7e1e1018ca7a92f857f15c293b207956fd6 100644
--- a/lib/validationtest.js
+++ b/lib/validationtest.js
@@ -17,7 +17,7 @@ ValidationTest.prototype.validate = async function(jobInfo, currentContextData)
     };
 
     self.jobInfo = jobInfo;
-    self.config = yaml.safeLoad(fs.readFileSync(path.join(__dirname, 'validationtestsettings.yaml'), 'utf8'));
+    self.config = require('./validationtestsettings.yaml');
     self.vlocityMatchingKeys = await self.vlocity.utilityservice.getDRMatchingKeyFields();
     var allTests = self.loadAllTests();
     var runTestData = await self.groupRunTestData(currentContextData, allTests);
diff --git a/lib/vlocity.js b/lib/vlocity.js
index f1bd071714b3eeff8c4c3f8372429f63f6053f18..7935687315d3f8845db2e33a96210c62f93df2c3 100644
--- a/lib/vlocity.js
+++ b/lib/vlocity.js
@@ -19,7 +19,7 @@ var deltacheck = require('./deltacheck');
 var utilityservice = require('./utilityservice.js');
 var testframework = require('./testframework.js');
 
-VLOCITY_BUILD_VERSION = require('../package.json').version;
+global.VLOCITY_BUILD_VERSION = require('../package.json').version;
 
 var SOURCE_FILE_CURRENT = 'sourceFileCurrent.json';
 var TARGET_FILE_CURRENT = 'targetFileCurrent.json';
diff --git a/lib/vlocitycli.js b/lib/vlocitycli.js
index 93a5aadf0755debdb1fd5fc67dd6f9327daa825d..7bd3b3f91b0e6a82e662f23a1c3f60b9b2796773 100644
--- a/lib/vlocitycli.js
+++ b/lib/vlocitycli.js
@@ -126,7 +126,7 @@ var VLOCITY_COMMANDLINE_OPTIONS_DEFAULTS = {
     target: 'local'
 };
 
-VLOCITY_COMMANDLINE_COMMANDS = {
+global.VLOCITY_COMMANDLINE_COMMANDS = {
     packExport: {
         name: 'Export',
         description: 'Export all DataPacks'
diff --git a/lib/vlocityutils.js b/lib/vlocityutils.js
index 9b76a8188c93821d4166d35d227b8e714b5cd7c1..d190721be4c034a65a08bffa6f5750771f4271c6 100644
--- a/lib/vlocityutils.js
+++ b/lib/vlocityutils.js
@@ -1,4 +1,4 @@
-VlocityUtils = {
+global.VlocityUtils = {
     showLoggingStatements: true,
     fullLog: [],
     namespace: '',
@@ -60,7 +60,7 @@ VlocityUtils.getIPCRenderer = function() {
 
     if (ipcRendererSingleton === undefined) {
         if ('electron' in process.versions) {
-            ipcRendererSingleton = require('electron').ipcRenderer;
+            ipcRendererSingleton = false;
         } else {
             ipcRendererSingleton = false;
         }