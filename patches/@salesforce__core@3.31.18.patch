diff --git a/lib/messages.js b/lib/messages.js
index ee3934c08862c35c86e32f4bc2c6f10a097fae74..66bdb0e492e2f815f66043a7c00d509050d9dbc9 100644
--- a/lib/messages.js
+++ b/lib/messages.js
@@ -200,6 +200,7 @@ class Messages {
             throw new Error(`Only json, js and md message files are allowed, not ${ext}: ${filePath}`);
         }
         return (locale) => {
+            return new Messages(bundleName, locale, new Map());
             let fileContents;
             let parser;
             if (ext === '.md') {
@@ -254,6 +255,7 @@ class Messages {
      * @param packageName The npm package name. Figured out from the root directory's package.json.
      */
     static importMessagesDirectory(moduleDirectoryPath, truncateToProjectPath = true, packageName) {
+        return;
         let moduleMessagesDirPath = moduleDirectoryPath;
         let projectRoot = moduleDirectoryPath;
         if (!path.isAbsolute(moduleDirectoryPath)) {
@@ -332,7 +334,7 @@ class Messages {
             return messages;
         }
         // Don't use messages inside messages
-        throw new kit_1.NamedError('MissingBundleError', `Missing bundle ${key.toString()} for locale ${Messages.getLocale()}.`);
+        return new Messages(bundleName, Messages.getLocale(), new Map());
     }
     /**
      * Load messages for a given package and bundle. If the bundle is not already cached, use the loader function
@@ -380,7 +382,7 @@ class Messages {
             return messages;
         }
         // Don't use messages inside messages
-        throw new kit_1.NamedError('MissingBundleError', `Missing bundle ${key.toString()} for locale ${Messages.getLocale()}.`);
+        return new Messages(bundleName, Messages.getLocale(), new Map());
     }
     /**
      * Check if a bundle already been loaded.
@@ -515,7 +517,7 @@ class Messages {
         }
         if (!map.has(key)) {
             // Don't use messages inside messages
-            throw new kit_1.NamedError('MissingMessageError', `Missing message ${this.bundleName}:${key} for locale ${Messages.getLocale()}.`);
+            return [ key, ...tokens ];
         }
         const msg = map.get(key);
         const messages = ((0, ts_types_1.isArray)(msg) ? msg : [msg]);
@@ -540,5 +542,8 @@ Messages.bundles = new Map();
  * @ignore
  */
 // eslint-disable-next-line @typescript-eslint/no-unsafe-return
-Messages.readFile = (filePath) => require(filePath);
+Messages.readFile = (filePath) => {
+    console.warn('Messages.readFile is not supported in bundled mode:', filePath);
+    return {};
+}
 //# sourceMappingURL=messages.js.map