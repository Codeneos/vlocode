{
    "name": "vlocode",
    "private": true,
    "displayName": "Salesforce Industries & Omnistudio (Vlocity)",
    "description": "Salesforce Industries, Omnistudio (Vlocity) development and deployment extension for VSCode",
    "version": "1.32.0",
    "license": "MIT",
    "icon": "resources/icon.png",
    "author": {
        "name": "Peter van Gulik",
        "email": "peter@curlybracket.nl"
    },
    "readme": "README.md",
    "publisher": "curlybracket",
    "engines": {
        "vscode": "^1.95.0"
    },
    "homepage": "https://github.com/Codeneos/vlocode/tree/main/packages/vscode-extension",
    "categories": [
        "Other"
    ],
    "keywords": [
        "salesforce",
        "omnistudio",
        "industries",
        "vlocity"
    ],
    "repository": "https://github.com/codeneos/vlocode.git",
    "bugs": {
        "url": "https://github.com/Codeneos/vlocode/issues",
        "email": "peter@curlybracket.nl"
    },
    "badges": [
        {
            "description": "CI Build Status",
            "url": "https://circleci.com/gh/Codeneos/vlocode/tree/main.svg?style=svg",
            "href": "https://circleci.com/gh/Codeneos/vlocode/tree/main"
        },
        {
            "description": "Written in Typescript",
            "url": "https://img.shields.io/github/languages/top/codeneos/vlocode.svg?logo=github",
            "href": "https://github.com/Codeneos/vlocode"
        },
        {
            "description": "Releases and version history",
            "url": "https://badgen.net/github/release/Codeneos/vlocode/stable",
            "href": "https://github.com/Codeneos/vlocode/releases"
        },
        {
            "description": "Downloads",
            "url": "https://badgen.net/vs-marketplace/d/curlybracket.vlocode",
            "href": "https://marketplace.visualstudio.com/items?itemName=curlybracket.vlocode"
        },
        {
            "description": "Bugs",
            "url": "https://img.shields.io/sonar/https/sonarcloud.io/curlybracket.vlocode/bugs.svg?color=lightgray&label=bugs&logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAAolBMVEUAAAD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgCXdjhZAAAANXRSTlMA%2Bg335ykFAwnr7hDZON7Ie1ZDMfTUmIUUSSLPoVAa4r6K8rtyXD62gG2xpsKSjnZpYx6qTp5XIo8AAAOWSURBVFjD7VbZtqIwEGSVRXYQAVFBFvf16v%2F%2F2tgJKsYEvPM4Z%2FLiwV7SXV2phPu3lyB71fnserLwN9HD%2BGBL4u2%2BRMk%2BeMJvw887CH6uIKuGvwhXvIK%2FEYtf1sq38epRu1GWtFa%2FLH%2FPNxFFvq6q9aGQ8LeYC19hH2L30VFWm4p8Z4Tb2H%2BRYbBC%2B2urWfvfy1hHGZx%2BHNwFeBox4alMDfhfv%2FbFJxNUvvlpqVEGe9aTYAxe85pmihGWTne8bEGnJ7qx5KG5pDNBCZssBcZ8M7CeOkcILuKUCTAP6bvo5GuAE5P1ESAsyR0JKqhxzLYfACG3ZwY8dMDsoWcOKXDFZ9tNYFnYQeMNkPh09fzZgD5loMKWfYxrREOeF3VjU%2FqUHMn8bp8w5Elwl4tba2nbTwWRNSRPBUWeFHMjkgqirckMXuPDFx5hUtcSGU4b%2BemV3BHeSHpoUut2uirL8XYSwNfCJEDetjQyjFrtNyJmjE3cnBJ54b3dgmhVBgytfIRTpENChPQ8aYNSHxzy4DkoTrmMseju1XcRmg64L866eL0nj1ER4rkZ7oghQuScgadNWz5ijIVBzlkiRCDoQKOB25Dagqhw8ECGP%2FXGHwOEwKPvCj4184HMpk%2Fwo72IGpWfzEEjze8WGwqL%2BwrIMbNafrUO52LGefCb9RUwtFG82ybvBnaecsd%2BrQYEfgD0d6lZ4x6gFdGj3%2FLDV2H%2B0tr4FHVZcjaUllDnvppk8etrRqrxzAJUOQNIGLEEcHTpwAVpNIfSRCyFDcwOZu6ACbgC6o25Quj0VrAjhINAuWInuGAMUtiHyqMp333L1AFQmCuZbr7WSTHMoBVngpsd0UCCCetm50W88DihgB5c5mNjz0oQB3hnjNWOVoKpA8Amo4Dl4wwkBupFoR4AgGnIfq7M5ScYOq0JD9jO5wPmgwmDH%2B2Qpk0%2FKyjxa32lfsYjRZtcmo0kfJERE4vyoHnihgRT1TOK0J97ngLk92MOWk5XKKxZtiu0CvNTXNlReQmu2FzIbgLlKoJ8XuLtdQ0XUZxkAfzVyzSV8N02Vtvd6s2NN8%2FSMNzaEo%2B%2F525sPG5a%2BycM08xqLAtHfX8Kj26UlZmgRTzFYlTkbJK9RjrNHUSvYWmQFj2UKbQxQ6u1Fz8ay8ojuTMR24nTekAX0aQKd5am65KRHaZvo4vivDAkfaFZdnhOKOEt7ZR9XwYBJZeKLJf7LP4vYv0BK5jBy9A2z3IAAAAASUVORK5CYII%3D",
            "href": "https://sonarcloud.io/dashboard?id=curlybracket.vlocode"
        },
        {
            "description": "Vulnerabilities",
            "url": "https://img.shields.io/sonar/https/sonarcloud.io/curlybracket.vlocode/vulnerabilities.svg?label=vulnerabilities&logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAAolBMVEUAAAD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgD%2FZgCXdjhZAAAANXRSTlMA%2Bg335ykFAwnr7hDZON7Ie1ZDMfTUmIUUSSLPoVAa4r6K8rtyXD62gG2xpsKSjnZpYx6qTp5XIo8AAAOWSURBVFjD7VbZtqIwEGSVRXYQAVFBFvf16v%2F%2F2tgJKsYEvPM4Z%2FLiwV7SXV2phPu3lyB71fnserLwN9HD%2BGBL4u2%2BRMk%2BeMJvw887CH6uIKuGvwhXvIK%2FEYtf1sq38epRu1GWtFa%2FLH%2FPNxFFvq6q9aGQ8LeYC19hH2L30VFWm4p8Z4Tb2H%2BRYbBC%2B2urWfvfy1hHGZx%2BHNwFeBox4alMDfhfv%2FbFJxNUvvlpqVEGe9aTYAxe85pmihGWTne8bEGnJ7qx5KG5pDNBCZssBcZ8M7CeOkcILuKUCTAP6bvo5GuAE5P1ESAsyR0JKqhxzLYfACG3ZwY8dMDsoWcOKXDFZ9tNYFnYQeMNkPh09fzZgD5loMKWfYxrREOeF3VjU%2FqUHMn8bp8w5Elwl4tba2nbTwWRNSRPBUWeFHMjkgqirckMXuPDFx5hUtcSGU4b%2BemV3BHeSHpoUut2uirL8XYSwNfCJEDetjQyjFrtNyJmjE3cnBJ54b3dgmhVBgytfIRTpENChPQ8aYNSHxzy4DkoTrmMseju1XcRmg64L866eL0nj1ER4rkZ7oghQuScgadNWz5ijIVBzlkiRCDoQKOB25Dagqhw8ECGP%2FXGHwOEwKPvCj4184HMpk%2Fwo72IGpWfzEEjze8WGwqL%2BwrIMbNafrUO52LGefCb9RUwtFG82ybvBnaecsd%2BrQYEfgD0d6lZ4x6gFdGj3%2FLDV2H%2B0tr4FHVZcjaUllDnvppk8etrRqrxzAJUOQNIGLEEcHTpwAVpNIfSRCyFDcwOZu6ACbgC6o25Quj0VrAjhINAuWInuGAMUtiHyqMp333L1AFQmCuZbr7WSTHMoBVngpsd0UCCCetm50W88DihgB5c5mNjz0oQB3hnjNWOVoKpA8Amo4Dl4wwkBupFoR4AgGnIfq7M5ScYOq0JD9jO5wPmgwmDH%2B2Qpk0%2FKyjxa32lfsYjRZtcmo0kfJERE4vyoHnihgRT1TOK0J97ngLk92MOWk5XKKxZtiu0CvNTXNlReQmu2FzIbgLlKoJ8XuLtdQ0XUZxkAfzVyzSV8N02Vtvd6s2NN8%2FSMNzaEo%2B%2F525sPG5a%2BycM08xqLAtHfX8Kj26UlZmgRTzFYlTkbJK9RjrNHUSvYWmQFj2UKbQxQ6u1Fz8ay8ojuTMR24nTekAX0aQKd5am65KRHaZvo4vivDAkfaFZdnhOKOEt7ZR9XwYBJZeKLJf7LP4vYv0BK5jBy9A2z3IAAAAASUVORK5CYII%3D",
            "href": "https://sonarcloud.io/dashboard?id=curlybracket.vlocode"
        }
    ],
    "activationEvents": [
        "onStartupFinished",
        "workspaceContains:**/*_datapack.json",
        "workspaceContains:**/*_DataPack.json",
        "workspaceContains:**/.vlocode",
        "workspaceContains:**/*.cls"
    ],
    "main": "./out/vlocode",
    "contributes": {
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "vlocode-vlocity",
                    "title": "Vlocity",
                    "icon": "resources/datapacks.svg"
                }
            ],
            "panel": [
                {
                    "id": "vlocode-developerlogs",
                    "title": "Salesforce Logs",
                    "icon": "resources/datapacks.svg"
                }
            ]
        },
        "viewsWelcome": [
            {
                "view": "datapackExplorer",
                "when": "vlocode.orgSelected != true",
                "contents": "Select an Salesforce instance to start exploring datapacks.\n[Select Salesforce org](command:vlocode.selectOrg)"
            }
        ],
        "views": {
            "vlocode-vlocity": [
                {
                    "id": "datapackExplorer",
                    "name": "Datapacks"
                },
                {
                    "id": "activityView",
                    "when": "vlocode.orgSelected == true",
                    "name": "Activity"
                },
                {
                    "id": "jobExplorer",
                    "when": "vlocode.orgSelected == true",
                    "name": "Jobs"
                }
            ],
            "vlocode-developerlogs": [
                {
                    "id": "developerLogsView",
                    "name": "Salesforce Logs",
                    "when": "vlocodeSalesforceSupport && vlocodeSalesforceDeveloperLogs && vlocode.orgSelected",
                    "contextualTitle": ""
                }
            ]
        },
        "commands": [
            {
                "command": "vlocode.selectOrg",
                "title": "Vlocode: Select Salesforce Org"
            },
            {
                "command": "vlocode.refreshDatapack",
                "title": "Datapack: Refresh from Org"
            },
            {
                "command": "vlocode.deployDatapack",
                "title": "Datapack: Deploy to Org"
            },
            {
                "command": "vlocode.openSalesforce",
                "title": "Datapack: Open in Org"
            },
            {
                "command": "vlocode.renameDatapack",
                "title": "Datapack: Rename..."
            },
            {
                "command": "vlocode.cloneDatapack",
                "title": "Datapack: Clone..."
            },
            {
                "command": "vlocode.exportDatapack",
                "title": "Datapack: Export from Org"
            },
            {
                "command": "vlocode.importMultipack",
                "title": "Datapack: Import Multipack..."
            },
            {
                "command": "vlocode.buildParentKeyFiles",
                "title": "Datapack: Repair dependencies"
            },
            {
                "command": "vlocode.createOmniscriptLwc",
                "title": "Vlocode: New OmniScript Web Component (LWC)"
            },
            {
                "command": "vlocode.buildDatapack",
                "title": "Datapack: Build zip file"
            },
            {
                "command": "vlocode.viewDatapack.generic",
                "title": "Datapack: View"
            },
            {
                "command": "vlocode.adminCommands",
                "title": "Vlocode: Industries Administration Console"
            },
            {
                "command": "vlocode.admin.refreshPriceBook",
                "title": "Vlocode: Refresh Pricebook"
            },
            {
                "command": "vlocode.admin.refreshProductHierarchy",
                "title": "Vlocode: Refresh Product Hierarchy"
            },
            {
                "command": "vlocode.admin.refreshPriceBookAndProductHierarchy",
                "title": "Vlocode: Refresh Pricebook and Product Hierarchy"
            },
            {
                "command": "vlocode.admin.updateAllProdAttribCommand",
                "title": "Vlocode: Update Industries Product Attributes"
            },
            {
                "command": "vlocode.admin.clearPlatformCache",
                "title": "Vlocode: Clear Industries Platform Cache"
            },
            {
                "command": "vlocode.deployMetadata",
                "title": "Salesforce: Deploy to Org"
            },
            {
                "command": "vlocode.deployDeltaMetadata",
                "title": "Salesforce: Deploy differences to Org"
            },
            {
                "command": "vlocode.refreshMetadata",
                "title": "Salesforce: Refresh from Org"
            },
            {
                "command": "vlocode.destroyMetadata",
                "title": "Salesforce: Delete from Org"
            },
            {
                "command": "vlocode.viewInSalesforce",
                "title": "Salesforce: Open in Org"
            },
            {
                "command": "vlocode.selectApiVersion",
                "title": "Salesforce: Select API Version"
            },
            {
                "command": "vlocode.createMetadataCommand",
                "title": "Salesforce: Create new metadata (LWC, APEX, Aura)"
            },
            {
                "command": "vlocode.execAnonymousCommand",
                "title": "Salesforce: Execute Anonymous APEX"
            },
            {
                "command": "vlocode.createLwc",
                "title": "Salesforce: New Lightning Web Component (LWC)"
            },
            {
                "command": "vlocode.createApexClass",
                "title": "Salesforce: New APEX class"
            },
            {
                "command": "vlocode.clearDeveloperLogs",
                "title": "Salesforce: Clear Developer Logs"
            },
            {
                "command": "vlocode.setTraceFlags",
                "title": "Salesforce: Set Debug Log Level"
            },
            {
                "command": "vlocode.setLogVisibility",
                "title": "Salesforce: Set Developer Log Visibility"
            },
            {
                "command": "vlocode.execRestApi",
                "title": "Salesforce: Execute REST API"
            },
            {
                "command": "vlocode.retrieveMetadata",
                "title": "Salesforce: Export/Retrieve metadata from Org"
            },
            {
                "command": "vlocode.pauseDeploymentQueue",
                "title": "Salesforce: Pause deployments"
            },
            {
                "command": "vlocode.resumeDeploymentQueue",
                "title": "Salesforce: Resume deployments"
            },
            {
                "command": "vlocode.clearDeploymentQueue",
                "title": "Salesforce: Clear pending deployment queue"
            },
            {
                "command": "vlocode.addToProfile",
                "title": "Salesforce: Add to profiles"
            },
            {
                "command": "vlocode.removeFromProfile",
                "title": "Salesforce: Remove from profiles"
            },
            {
                "command": "vlocode.deployRecentValidation",
                "title": "Salesforce: Deploy Recent Validation"
            },
            {
                "command": "vlocode.datapackExplorer.export",
                "title": "Export",
                "icon": {
                    "light": "resources/light/export.svg",
                    "dark": "resources/dark/export.svg"
                }
            },
            {
                "command": "vlocode.datapackExplorer.refresh",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "vlocode.datapackExplorer.openSalesforce",
                "title": "Open in Salesforce",
                "icon": {
                    "light": "resources/light/link-external.svg",
                    "dark": "resources/dark/link-external.svg"
                }
            },
            {
                "command": "vlocode.jobExplorer.refresh",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "vlocode.jobExplorer.run",
                "title": "Run job",
                "icon": {
                    "light": "resources/light/start.svg",
                    "dark": "resources/dark/start.svg"
                }
            },
            {
                "command": "vlocode.developerLogs.setLogLevel",
                "title": "Set log level",
                "icon": {
                    "light": "resources/light/settings.svg",
                    "dark": "resources/dark/settings.svg"
                }
            },
            {
                "command": "vlocode.developerLogs.deleteAll",
                "title": "Delete all logs",
                "icon": {
                    "light": "resources/light/trash.svg",
                    "dark": "resources/dark/trash.svg"
                }
            },
            {
                "command": "vlocode.developerLogs.refresh",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "vlocode.developerLogs.setLogVisibility",
                "title": "Log Visibility (own/all)",
                "icon": {
                    "light": "resources/light/visibility.svg",
                    "dark": "resources/dark/visibility.svg"
                }
            },
            {
                "command": "vlocode.omniScript.generateLwc",
                "title": "OmniScript: Generate LWC"
            },
            {
                "command": "vlocode.omniScript.activate",
                "title": "OmniScript: (Re-)Activate"
            },
            {
                "command": "vlocode.card.generateLwc",
                "title": "FlexCard: Generate LWC"
            },
            {
                "command": "vlocode.card.activate",
                "title": "FlexCard: (Re-)Activate"
            },
            {
                "command": "vlocode.vlocityCard.convert",
                "title": "FlexCard: Convert Runtime"
            },
            {
                "command": "vlocode.omniScript.convert",
                "title": "OmniScript: Convert Runtime"
            },
            {
                "command": "vlocode.ip.convert",
                "title": "Integration Procedure: Convert Runtime"
            },
            {
                "command": "vlocode.dataRaptor.convert",
                "title": "DataRaptor: Convert Runtime"
            },
            {
                "command": "vlocode.openMetaXml",
                "title": "Salesforce: Open -meta.xml",
                "icon": {
                    "light": "resources/light/meta-xml.svg",
                    "dark": "resources/dark/meta-xml.svg"
                }
            },
            {
                "command": "vlocode.openSourceFile",
                "title": "Salesforce: Open Source",
                "icon": "$(code)"
            },
            {
                "command": "vlocode.apex.toggleCoverage",
                "title": "APEX: Highlight Unit Test Coverage",
                "icon": "$(test-view-icon)"
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "vlocode.refreshDatapack",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.deployDatapack",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.openSalesforce",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.renameDatapack",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.cloneDatapack",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.buildParentKeyFiles",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.buildDatapack",
                    "group": "v_vlocity",
                    "when": "false"
                },
                {
                    "command": "vlocode.viewDatapack.generic",
                    "group": "v_vlocity",
                    "when": "false"
                },
                {
                    "command": "vlocode.deployMetadata",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.deployDeltaMetadata",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.refreshMetadata",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.destroyMetadata",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.viewInSalesforce",
                    "group": "v_salesforce",
                    "when": "(vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata) && resourceSet"
                },
                {
                    "command": "vlocode.selectApiVersion",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.createMetadataCommand",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.execAnonymousCommand",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.createLwc",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.createApexClass",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.clearDeveloperLogs",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.setTraceFlags",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.setLogVisibility",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.execRestApi",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.retrieveMetadata",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.pauseDeploymentQueue",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.resumeDeploymentQueue",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.clearDeploymentQueue",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.deployRecentValidation",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "when": "false"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "when": "viewItem == vlocode:datapack:object && false"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "when": "false"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "when": "viewItem == vlocode:datapack:category && false"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "when": "false"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "when": "viewItem == vlocode:datapack:sobject && false"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "when": "false"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "when": "viewItem == vlocode:datapack:sobjectType && false"
                },
                {
                    "command": "vlocode.datapackExplorer.refresh",
                    "when": "false"
                },
                {
                    "command": "vlocode.datapackExplorer.refresh",
                    "when": "view == datapackExplorer && false"
                },
                {
                    "command": "vlocode.datapackExplorer.openSalesforce",
                    "when": "false"
                },
                {
                    "command": "vlocode.datapackExplorer.openSalesforce",
                    "when": "viewItem == vlocode:datapack:object && false"
                },
                {
                    "command": "vlocode.datapackExplorer.openSalesforce",
                    "when": "false"
                },
                {
                    "command": "vlocode.datapackExplorer.openSalesforce",
                    "when": "viewItem == vlocode:datapack:sobject && false"
                },
                {
                    "command": "vlocode.jobExplorer.refresh",
                    "when": "false"
                },
                {
                    "command": "vlocode.jobExplorer.refresh",
                    "when": "view == jobExplorer && false"
                },
                {
                    "command": "vlocode.jobExplorer.run",
                    "when": "false"
                },
                {
                    "command": "vlocode.jobExplorer.run",
                    "when": "viewItem == vlocode:jobYaml && false"
                },
                {
                    "command": "vlocode.developerLogs.setLogLevel",
                    "when": "false"
                },
                {
                    "command": "vlocode.developerLogs.setLogLevel",
                    "when": "view == developerLogsView && false"
                },
                {
                    "command": "vlocode.developerLogs.deleteAll",
                    "when": "false"
                },
                {
                    "command": "vlocode.developerLogs.deleteAll",
                    "when": "view == developerLogsView && false"
                },
                {
                    "command": "vlocode.developerLogs.refresh",
                    "when": "false"
                },
                {
                    "command": "vlocode.developerLogs.refresh",
                    "when": "view == developerLogsView && false"
                },
                {
                    "command": "vlocode.developerLogs.setLogVisibility",
                    "when": "false"
                },
                {
                    "command": "vlocode.developerLogs.setLogVisibility",
                    "when": "view == developerLogsView && false"
                },
                {
                    "command": "vlocode.omniScript.generateLwc",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\]OmniScript([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.omniScript.activate",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\]OmniScript([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.card.generateLwc",
                    "group": "v_vlocity_cards",
                    "when": "resourcePath =~ /[\\/\\\\](VlocityCard|FlexCard)([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.card.activate",
                    "group": "v_vlocity_cards",
                    "when": "resourcePath =~ /[\\/\\\\](VlocityCard|FlexCard)([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.vlocityCard.convert",
                    "group": "v_vlocity_cards",
                    "when": "resourcePath =~ /[\\/\\\\](VlocityCard|FlexCard)([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.omniScript.convert",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\]OmniScript([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.ip.convert",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\]IntegrationProcedure([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.dataRaptor.convert",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\](DataRaptor|OmniDataTransform)([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.apex.toggleCoverage",
                    "group": "v_apex",
                    "when": "resourceExtname == .cls"
                }
            ],
            "explorer/context": [
                {
                    "command": "vlocode.refreshDatapack",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.deployDatapack",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.openSalesforce",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.renameDatapack",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.cloneDatapack",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.deployMetadata",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.deployDeltaMetadata",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.refreshMetadata",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.destroyMetadata",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.viewInSalesforce",
                    "group": "v_salesforce",
                    "when": "(vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata) && !explorerResourceIsFolder"
                },
                {
                    "command": "vlocode.execAnonymousCommand",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled && resourceScheme == file && resourceExtname == .apex"
                },
                {
                    "command": "vlocode.execRestApi",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled && (resourceExtname == .sfhttp || resourceExtname == .http || editorLangId == sfhttp)"
                },
                {
                    "command": "vlocode.execRestApi",
                    "group": "v_salesforce",
                    "when": "config.vlocity.salesforce.enabled && (resourceExtname == .sfhttp || resourceExtname == .http || editorLangId == sfhttp)"
                },
                {
                    "command": "vlocode.addToProfile",
                    "group": "v_salesforce_profile",
                    "when": "config.vlocity.salesforce.profileActionsInContextMenu && config.vlocity.salesforce.enabled && resourceScheme == file && resourceFilename =~ /(\\.object|\\.field-meta\\.xml|\\.cls|\\.cls-meta\\.xml)$/"
                },
                {
                    "command": "vlocode.addToProfile",
                    "group": "v_salesforce_profile",
                    "when": "config.vlocity.salesforce.profileActionsInContextMenu && config.vlocity.salesforce.enabled && explorerResourceIsFolder && resourceDirname =~ /(objects|classes)/"
                },
                {
                    "command": "vlocode.removeFromProfile",
                    "group": "v_salesforce_profile",
                    "when": "config.vlocity.salesforce.profileActionsInContextMenu && config.vlocity.salesforce.enabled && resourceScheme == file && resourceFilename =~ /(\\.object|\\.field-meta\\.xml|\\.cls|\\.cls-meta\\.xml)$/"
                },
                {
                    "command": "vlocode.removeFromProfile",
                    "group": "v_salesforce_profile",
                    "when": "config.vlocity.salesforce.profileActionsInContextMenu && config.vlocity.salesforce.enabled && explorerResourceIsFolder && resourceDirname =~ /(objects|classes)/"
                },
                {
                    "command": "vlocode.omniScript.generateLwc",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\]OmniScript([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.omniScript.activate",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\]OmniScript([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.card.generateLwc",
                    "group": "v_vlocity_cards",
                    "when": "resourcePath =~ /[\\/\\\\](VlocityCard|FlexCard)([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.card.activate",
                    "group": "v_vlocity_cards",
                    "when": "resourcePath =~ /[\\/\\\\](VlocityCard|FlexCard)([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.vlocityCard.convert",
                    "group": "v_vlocity_cards",
                    "when": "resourcePath =~ /[\\/\\\\](VlocityCard|FlexCard)([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.omniScript.convert",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\]OmniScript([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.ip.convert",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\]IntegrationProcedure([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.dataRaptor.convert",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\](DataRaptor|OmniDataTransform)([\\/\\\\]|$)/"
                }
            ],
            "editor/context": [
                {
                    "command": "vlocode.refreshDatapack",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.deployDatapack",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.openSalesforce",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.cloneDatapack",
                    "group": "v_vlocity",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.datapacks"
                },
                {
                    "command": "vlocode.deployMetadata",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.deployDeltaMetadata",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.refreshMetadata",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.destroyMetadata",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.viewInSalesforce",
                    "group": "v_salesforce",
                    "when": "vlocode.conditionalContextMenus == false || resourcePath in vlocode.metadata"
                },
                {
                    "command": "vlocode.addToProfile",
                    "group": "v_salesforce_profile",
                    "when": "config.vlocity.salesforce.profileActionsInContextMenu && config.vlocity.salesforce.enabled && resourceScheme == file && resourceFilename =~ /(\\.object|\\.field-meta\\.xml|\\.cls|\\.cls-meta\\.xml)$/"
                },
                {
                    "command": "vlocode.removeFromProfile",
                    "group": "v_salesforce_profile",
                    "when": "config.vlocity.salesforce.profileActionsInContextMenu && config.vlocity.salesforce.enabled && resourceScheme == file && resourceFilename =~ /(\\.object|\\.field-meta\\.xml|\\.cls|\\.cls-meta\\.xml)$/"
                },
                {
                    "command": "vlocode.omniScript.generateLwc",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\]OmniScript([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.omniScript.activate",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\]OmniScript([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.card.generateLwc",
                    "group": "v_vlocity_cards",
                    "when": "resourcePath =~ /[\\/\\\\](VlocityCard|FlexCard)([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.card.activate",
                    "group": "v_vlocity_cards",
                    "when": "resourcePath =~ /[\\/\\\\](VlocityCard|FlexCard)([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.vlocityCard.convert",
                    "group": "v_vlocity_cards",
                    "when": "resourcePath =~ /[\\/\\\\](VlocityCard|FlexCard)([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.omniScript.convert",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\]OmniScript([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.ip.convert",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\]IntegrationProcedure([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.dataRaptor.convert",
                    "group": "v_vlocity_omniscript",
                    "when": "resourcePath =~ /[\\/\\\\](DataRaptor|OmniDataTransform)([\\/\\\\]|$)/"
                },
                {
                    "command": "vlocode.apex.toggleCoverage",
                    "group": "v_apex",
                    "when": "resourceExtname == .cls"
                }
            ],
            "view/item/context": [
                {
                    "command": "vlocode.datapackExplorer.export",
                    "group": "inline",
                    "when": "viewItem == vlocode:datapack:object"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "group": "inline",
                    "when": "viewItem == vlocode:datapack:category"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "group": "inline",
                    "when": "viewItem == vlocode:datapack:sobject"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "group": "inline",
                    "when": "viewItem == vlocode:datapack:sobjectType"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "group": "v_vlocity",
                    "when": "viewItem == vlocode:datapack:object"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "group": "v_vlocity",
                    "when": "viewItem == vlocode:datapack:category"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "group": "v_vlocity",
                    "when": "viewItem == vlocode:datapack:sobject"
                },
                {
                    "command": "vlocode.datapackExplorer.export",
                    "group": "v_vlocity",
                    "when": "viewItem == vlocode:datapack:sobjectType"
                },
                {
                    "command": "vlocode.datapackExplorer.openSalesforce",
                    "group": "inline",
                    "when": "viewItem == vlocode:datapack:object"
                },
                {
                    "command": "vlocode.datapackExplorer.openSalesforce",
                    "group": "inline",
                    "when": "viewItem == vlocode:datapack:sobject"
                },
                {
                    "command": "vlocode.datapackExplorer.openSalesforce",
                    "group": "v_vlocity",
                    "when": "viewItem == vlocode:datapack:object"
                },
                {
                    "command": "vlocode.datapackExplorer.openSalesforce",
                    "group": "v_vlocity",
                    "when": "viewItem == vlocode:datapack:sobject"
                },
                {
                    "command": "vlocode.jobExplorer.run",
                    "group": "inline",
                    "when": "viewItem == vlocode:jobYaml"
                }
            ],
            "view/title": [
                {
                    "command": "vlocode.datapackExplorer.refresh",
                    "group": "navigation",
                    "when": "view == datapackExplorer"
                },
                {
                    "command": "vlocode.jobExplorer.refresh",
                    "group": "navigation",
                    "when": "view == jobExplorer"
                },
                {
                    "command": "vlocode.developerLogs.setLogLevel",
                    "group": "navigation",
                    "when": "view == developerLogsView"
                },
                {
                    "command": "vlocode.developerLogs.deleteAll",
                    "group": "navigation",
                    "when": "view == developerLogsView"
                },
                {
                    "command": "vlocode.developerLogs.refresh",
                    "group": "navigation",
                    "when": "view == developerLogsView"
                },
                {
                    "command": "vlocode.developerLogs.setLogVisibility",
                    "group": "navigation",
                    "when": "view == developerLogsView"
                }
            ],
            "editor/title/run": [
                {
                    "command": "vlocode.openMetaXml",
                    "when": "resourceExtname =~ /\\.(cls|trigger)$/"
                },
                {
                    "command": "vlocode.openSourceFile",
                    "when": "resourcePath =~ /\\.(cls|trigger)-meta\\.xml$/"
                }
            ]
        },
        "configuration": [
            {
                "type": "object",
                "title": "General",
                "properties": {
                    "vlocity.sfdxUsername": {
                        "type": "string",
                        "scope": "machine-overridable",
                        "deprecationMessage": "Vlocode will from version 1.31.3 and higher read the Salesfocrce username from the SFDX project configuration file (sfdx-project.json) instead.",
                        "markdownDescription": "SFDX username; when this is specified the username, password, loginUrl and instanceUrl are ignored."
                    },
                    "vlocity.httpProxy": {
                        "type": "string",
                        "deprecationMessage": "Vlocode useses VSCodes built-in proxy settings instead",
                        "description": "Optional HTTP proxy for connecting to Salesforce"
                    },
                    "vlocity.fsInterface": {
                        "type": "string",
                        "enum": [
                            "vscode",
                            "native"
                        ],
                        "deprecationMessage": "This setting is deprecated, Vlocode now always uses the native (Node) file system interface as it is generally faster and more reliable.",
                        "default": "native",
                        "enumDescriptions": [
                            "VSCode's built-in file system interface",
                            "Native file system interface through NodeJS's fs-module"
                        ],
                        "markdownDescription": "Change how the file system is accessed; the native file system interface is faster but might not work correctly on all platforms."
                    },
                    "vlocity.logLevel": {
                        "type": "string",
                        "default": "info",
                        "enum": [
                            "info",
                            "verbose",
                            "debug"
                        ],
                        "markdownDescription": "Determines the amount of details printed to the integrated terminal for Vlocode"
                    },
                    "vlocity.logInTerminal": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "Enable logging in `TERMINAL` tab instead of in the `OUTPUT` tab, terminal logging uses a vscode *Pseudoterminal* and has support for colors but might not work correctly on all platforms.\n\n**Note** Changing this will require you to restart for the changes to be applied."
                    },
                    "vlocity.conditionalContextMenus": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "When enabled context menu options on the workspace-explorer and editor are displayed only when applicable; when enabled Vlocode monitors your workspace folders and keeps track of a list of files which are either Salesforce metadata of Vlocity datapacks. If you disabled this both Vlocity and Salesforce context menu options will always be visible. __Note: if you don't see any context menu options disable this.__"
                    },
                    "vlocity.suggestRefactoringOnRename": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "When renaming metadata Vlocode will suggest a refactoring of your source code to match the new name; works for Datapacks and LWC/Aura source code."
                    },
                    "vlocity.applyRefactoringWithoutPreview": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "When `suggestRefactoringOnRename` is enabled this setting controls if refactroings are previewed in the refactoring panel before being applied. __Note: even when enabled you will get a pop-up to confirm Vlocode to apply __"
                    }
                }
            },
            {
                "type": "object",
                "title": "Datapacks",
                "properties": {
                    "vlocity.projectPath": {
                        "type": "string",
                        "scope": "machine-overridable",
                        "markdownDescription": "Path to the folder containing the Vlocity datapacks relative to the workspace root folder, for example:\n - `./vlocity`\n - `./datapacks`"
                    },
                    "vlocity.customJobOptionsYaml": {
                        "type": "string",
                        "scope": "machine-overridable",
                        "markdownDescription": "Path to the custom YAML that is used during deployment and export, see the official Vlocity Build repository for [documentation](https://github.com/vlocityinc/vlocity_build#additional-command-line-options) on the format of this file.\n\n> **Note** most of the job options are controlled by Vlocode therefore only the **`preStepApex`**, **`postStepApex`** and **`OverrideSettings`** settings will be used from specified YAML file."
                    },
                    "vlocity.deployOnSave": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "Automatically deploy datapacks to Salesforce when changes are saved."
                    },
                    "vlocity.compileOnBuild": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "Compile SCSS source before deploying to the target org."
                    },
                    "vlocity.autoActivate": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "Automatically activate datapacks after deployment to the target org."
                    },
                    "vlocity.parallelLimit": {
                        "type": "number",
                        "default": 50,
                        "markdownDescription": "The number of parallel exports to run when exporting or refreshing datapacks"
                    },
                    "vlocity.deploymentMode": {
                        "type": "string",
                        "enum": [
                            "compatibility",
                            "direct"
                        ],
                        "default": "direct",
                        "enumDescriptions": [
                            "Use Vlocity Tools library; use this mode when you experience issues with the direct mode",
                            "Directly loads records in Salesforce using the Vlocode client side deployment library (fast)"
                        ],
                        "markdownDescription": "Change how Datapacks are deployment by Vlocode. Vlocode uses *direct* as new default, if you experience issues with the *direct* mode switch to the older tools based _compatibility_ mode."
                    },
                    "vlocity.deploy.chunkSize": {
                        "type": "number",
                        "default": 100,
                        "markdownDescription": "Number of records to deploy in as single operation using the collection API, only affects deployments when *direct* mode is enabled"
                    },
                    "vlocity.deploy.lwcActivation": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "Deploy LWC components for OmniScripts or FlexCards that are LWC enabled"
                    },
                    "vlocity.deploy.lwcDeploymentType": {
                        "type": "string",
                        "enum": [
                            "tooling",
                            "metadata"
                        ],
                        "default": "tooling",
                        "enumDescriptions": [
                            "Use the Salesforce Tooling API to deploy LWC components",
                            "Use the Salesforce Metadata API to deploy LWC components"
                        ],
                        "markdownDescription": "The deployment type used for LWC components; Generally the Tooling API is faster and is recommended. The Metadata API has better error reporting and is more reliable for larger deployments."
                    },
                    "vlocity.deploy.standardRuntime": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "Enables generation of standard runtime (in core) LWC components for OmniScripts and FlexCards. _Note: only has effect when **vlocity.deploy.lwcActivation** is enabled_"
                    },
                    "vlocity.deploy.allowUnresolvedDependencies": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "Allow deployment of datapacks with unresolved dependencies; this can lead to deployment failures if the dependencies are required in the target org."
                    },
                    "vlocity.deploy.disableTriggers": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "Disable SF Industries triggers during deployment. Helps with resolving deployment errors and speeds up deployment but runtime generated fields will not be populated."
                    }
                }
            },
            {
                "type": "object",
                "title": "Salesforce",
                "properties": {
                    "vlocity.salesforce.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "Enables support for **Salesforce commands** such as _Deploy_ and _Refresh_ of Salesforce Metadata Objects through Vlocode"
                    },
                    "vlocity.salesforce.apiVersion": {
                        "type": "string",
                        "pattern": "^\\d{2,3}\\.\\d$",
                        "examples": [
                            "48.0",
                            "49.0",
                            "50.0",
                            "51.0"
                        ],
                        "default": "51.0",
                        "markdownDescription": "The API version used for Salesforce deployments and refresh operations. Invalid API versions will cause all Salesforce related commands to fail."
                    },
                    "vlocity.salesforce.deployOnSave": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "Automatically deploy metadata files to Salesforce when saved."
                    },
                    "vlocity.salesforce.profileActionsInContextMenu": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "Display add __and to profiles__ and __remove from profiles__ commands in the editor and explorer context menu. If unchecked profile actions are only available from the command pallet."
                    },
                    "vlocity.salesforce.manageMetaXmlFiles": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "Enables auto renaming and creation of _-meta.xml_ files for APEX classes. _Note: only has effect when **vlocity.salesforce.enabled** is enabled_"
                    },
                    "vlocity.salesforce.exportFolder": {
                        "type": "string",
                        "default": "./src",
                        "markdownDescription": "Folder to which Vlocode export Salesforce metadata"
                    },
                    "vlocity.salesforce.exportFormat": {
                        "type": "string",
                        "enum": [
                            "classic",
                            "sfdx"
                        ],
                        "default": "classic",
                        "enumDescriptions": [
                            "Export Salesforce Metadata in **classic metadata** format without decomposing metadata and adding additional -meta.xml suffixes as retrieved from Salesforce through the metadata API.",
                            "Export Salesforce Metadata in **decomposed SFDX** format without. Decomposes metadata in multiple files and adds additional -meta.xml all exported metadata without content."
                        ],
                        "markdownDescription": "Folder to which Vlocode export Salesforce metadata"
                    }
                }
            },
            {
                "type": "object",
                "title": "Salesforce Developer Logs",
                "properties": {
                    "vlocity.salesforce.developerLogsVisible": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "Show the Salesforce developer logs panel"
                    },
                    "vlocity.salesforce.developerLogsVisibility": {
                        "type": "string",
                        "enum": [
                            "self",
                            "all"
                        ],
                        "default": "self",
                        "enumDescriptions": [
                            "Display only the logs generated by the currently connected user",
                            "Display all developer logs on the connected org from all users with active trace flags"
                        ],
                        "markdownDescription": "Change which logs are displayed and visible in the Developer logs panel"
                    },
                    "vlocity.salesforce.developerLogsAutoRefresh": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "Auto refresh the Salesforce logs panel when the panel is visible \n\n> **Note** This setting only has effect for Developer instances; for production instances the logs panel needs to be refreshed manually"
                    }
                }
            }
        ],
        "grammars": [
            {
                "language": "vldp",
                "scopeName": "source.json",
                "path": "./syntax/datapack.tmLanguage.json"
            },
            {
                "language": "sfhttp",
                "scopeName": "source.sfhttp",
                "path": "./syntax/sfhttp.tmLanguage.json"
            }
        ],
        "languages": [
            {
                "id": "vldp",
                "aliases": [
                    "Vlocity Datapack"
                ],
                "extensions": [],
                "filenamePatterns": [
                    "*_DataPack.json",
                    "*_ParentKeys.json"
                ],
                "configuration": "./syntax/datapack-language.json"
            },
            {
                "id": "sfhttp",
                "aliases": [
                    "Salesforce HTTP API"
                ],
                "extensions": [
                    ".sfhttp",
                    ".http"
                ],
                "configuration": "./syntax/sfhttp-language.json"
            },
            {
                "id": "xml",
                "extensions": [
                    ".accountForecastSetting",
                    ".accountRelationshipShareRule",
                    ".acctMgrTargetSetting",
                    ".actionLinkGroupTemplate",
                    ".aiAssistantTemplate",
                    ".animationRule",
                    ".app",
                    ".appMenu",
                    ".approvalProcess",
                    ".apt",
                    ".assignmentRules",
                    ".assistantRecommendationType",
                    ".authprovider",
                    ".autoResponseRules",
                    ".batchCalcJobDefinition",
                    ".batchProcessJobDefinition",
                    ".benefitAction",
                    ".bot",
                    ".brandingSet",
                    ".briefcaseDefinition",
                    ".businessProcessFeedbackConfiguration",
                    ".businessProcessGroup",
                    ".cachePartition",
                    ".callCenter",
                    ".campaignInfluenceModel",
                    ".Canvas",
                    ".careProviderSearchConfig",
                    ".careSystemFieldMapping",
                    ".CaseSubjectParticle",
                    ".channelLayout",
                    ".ChannelObjectLinkingRule",
                    ".ChatterExtension",
                    ".cleanDataService",
                    ".commandaction",
                    ".community",
                    ".communityTemplateDefinition",
                    ".communityThemeDefinition",
                    ".config",
                    ".connectedApp",
                    ".ConversationVendorFieldDefinition",
                    ".ConversationVendorInformation",
                    ".corsWhitelistOrigin",
                    ".cspTrustedSite",
                    ".customApplicationComponent",
                    ".customExperience",
                    ".customHelpMenuSection",
                    ".customPermission",
                    ".dashboard",
                    ".datacategorygroup",
                    ".dataSource",
                    ".dataSourceObject",
                    ".dataStreamDefinition",
                    ".datatype",
                    ".decisionTable",
                    ".decisionTableDatasetLink",
                    ".delegateGroup",
                    ".delivery",
                    ".deployment",
                    ".documentType",
                    ".duplicateRule",
                    ".dynamicTrigger",
                    ".EmbeddedServiceBranding",
                    ".EmbeddedServiceConfig",
                    ".EmbeddedServiceFieldService",
                    ".EmbeddedServiceFlowConfig",
                    ".EmbeddedServiceLiveAgent",
                    ".entitlementProcess",
                    ".entitlementTemplate",
                    ".entityImplements",
                    ".escalationRules",
                    ".eventType",
                    ".externalDataConnector",
                    ".externalServiceRegistration",
                    ".featureParameterBoolean",
                    ".featureParameterDate",
                    ".featureParameterInteger",
                    ".feedFilter",
                    ".fieldServiceMobileExtension",
                    ".fieldSrcTrgtRelationship",
                    ".flexipage",
                    ".flow",
                    ".flowCategory",
                    ".flowDefinition",
                    ".form",
                    ".function",
                    ".gatewayProviderPaymentMethodType",
                    ".globalPicklist",
                    ".globalValueSet",
                    ".globalValueSetTranslation",
                    ".goal",
                    ".group",
                    ".homePageComponent",
                    ".homePageLayout",
                    ".icon",
                    ".iframeWhiteListUrlSettings",
                    ".inboundNetworkConnection",
                    ".insightType",
                    ".installedPackage",
                    ".keywords",
                    ".labels",
                    ".layout",
                    ".LeadConvertSetting",
                    ".letter",
                    ".licenseDefinition",
                    ".lightningBolt",
                    ".lightningExperienceTheme",
                    ".lightningOnboardingConfig",
                    ".liveChatAgentConfig",
                    ".liveChatButton",
                    ".liveChatDeployment",
                    ".liveChatSensitiveDataRule",
                    ".managedContentType",
                    ".managedTopics",
                    ".marketingResourceType",
                    ".matchingRule",
                    ".messageChannel",
                    ".milestoneType",
                    ".mktDataTranObject",
                    ".mlDomain",
                    ".MobileApplicationDetail",
                    ".mutingpermissionset",
                    ".myDomainDiscoverableLogin",
                    ".namedCredential",
                    ".navigationMenu",
                    ".network",
                    ".notifications",
                    ".notiftype",
                    ".oauthcustomscope",
                    ".object",
                    ".objectSourceTargetMap",
                    ".objectTranslation",
                    ".orchestrationContext",
                    ".outboundNetworkConnection",
                    ".participantRole",
                    ".pathAssistant",
                    ".paymentGatewayProvider",
                    ".permissionset",
                    ".permissionsetgroup",
                    ".platformEventChannel",
                    ".platformEventChannelMember",
                    ".platformEventSubscriberConfig",
                    ".policy",
                    ".portal",
                    ".postTemplate",
                    ".presenceDeclineReason",
                    ".presenceUserConfig",
                    ".profile",
                    ".profilePasswordPolicy",
                    ".profileSessionSetting",
                    ".prompt",
                    ".queue",
                    ".queueRoutingConfig",
                    ".quickAction",
                    ".recommendationStrategy",
                    ".redirectWhitelistUrl",
                    ".remoteSite",
                    ".report",
                    ".reportType",
                    ".role",
                    ".rule",
                    ".s3DataConnector",
                    ".salesAgreementSetting",
                    ".samlssoconfig",
                    ".serviceChannel",
                    ".servicePresenceStatus",
                    ".settings",
                    ".sharingRules",
                    ".sharingSet",
                    ".site",
                    ".skill",
                    ".snapshot",
                    ".standardValueSet",
                    ".standardValueSetTranslation",
                    ".subscription",
                    ".synonymDictionary",
                    ".tab",
                    ".territory",
                    ".territory2",
                    ".territory2Model",
                    ".territory2Rule",
                    ".territory2Type",
                    ".testSuite",
                    ".timeSheetTemplate",
                    ".topicsForObjects",
                    ".transactionSecurityPolicy",
                    ".translation",
                    ".type",
                    ".userCriteria",
                    ".visualizationPlugin",
                    ".wapp",
                    ".wds",
                    ".weblink",
                    ".webStoreTemplate",
                    ".workflow",
                    ".workSkillRouting",
                    ".xmd",
                    ".xorghub",
                    ".xml"
                ]
            }
        ]
    },
    "scripts": {
        "build": "pnpm pre-build && tsc -b",
        "build-webpack": "pnpm pre-build && webpack --config webpack/webpack.prod.mjs --env extension",
        "build-webpack-dev": "pnpm pre-build && webpack --config webpack/webpack.dev.mjs --env extension",
        "watch": "webpack --watch --config webpack/webpack.dev.mjs --env extension",
        "watch-prod": "webpack --watch --config webpack/webpack.prod.mjs --env extension",
        "pack": "vsce package --no-dependencies --allow-star-activation --allow-package-secrets npm",
        "pre-build": "tsx build/buildCommands.ts ./package.json ./commands.yaml",
        "clean": "shx rm -rf ./out ./.ts-temp './src/**/*.{d.ts,ts.map,js.map,js}'",
        "publish": "vsce publish --no-dependencies --allow-star-activation --allow-package-secrets npm",
        "cp-changelog": "shx cp ../../CHANGELOG.md CHANGELOG.md",
        "vscode:prepublish": "pnpm run clean && pnpm run cp-changelog && pnpm build-webpack"
    },
    "devDependencies": {
        "@types/copy-webpack-plugin": "^8.0.1",
        "@types/fs-extra": "^11",
        "@types/jest": "^29.5.11",
        "@types/js-yaml": "^4.0.2",
        "@types/jsforce": "^1.9.38",
        "@types/luxon": "^3.3.0",
        "@types/node": "~20.17",
        "@types/vscode": "^1.95.0",
        "@vlocode/core": "workspace:*",
        "@vlocode/omniscript": "workspace:*",
        "@vlocode/salesforce": "workspace:*",
        "@vlocode/util": "workspace:*",
        "@vlocode/vlocity": "workspace:*",
        "@vlocode/vlocity-deploy": "workspace:*",
        "@vscode/test-electron": "^2.3.8",
        "@vscode/vsce": "^3.4.1",
        "chalk": "^4.1.2",
        "copy-webpack-plugin": "^9.1.0",
        "esbuild-loader": "^4.3.0",
        "escape-string-regexp": "^4.0.0",
        "fast-glob": "^3.3.3",
        "fs-extra": "^11.0",
        "jest": "^29.7.0",
        "js-yaml": "^4.1.0",
        "jsforce": "^1.11.0",
        "log-symbols": "^4.0.0",
        "luxon": "^3.4.4",
        "open": "^8.2.1",
        "reflect-metadata": "^0.1.13",
        "shx": "^0.3.4",
        "ts-jest": "^29.3.4",
        "ts-loader": "^9.5.2",
        "tsconfig-paths-webpack-plugin": "^3.5.2",
        "tsx": "^4.19.4",
        "type-fest": "^2.12.2",
        "typescript": "5.9.2",
        "vlocity": "1.14.18",
        "vscode-languageclient": "^8.1.0",
        "webpack": "^5.99.9",
        "webpack-cli": "^6.0.1",
        "webpack-merge": "^6.0.1"
    }
}
