import { VlocodeCommand } from '@root/constants';
import { vscodeCommand } from '@root/lib/commandRouter';
import { SalesforceDebugLevel } from '@vlocode/salesforce';
import moment = require('moment');
import * as vscode from 'vscode';
import { getContext } from '../../lib/vlocodeContext';
import MetadataCommand from '../metadata/metadataCommand';

@vscodeCommand(VlocodeCommand.setTraceFlags)
export default class SetTraceFlagsCommand extends MetadataCommand {

    /**
     * Log level options to ask the user ot fill in
     */
    private readonly logLevelOptions = {
        apexCode: {
            placeHolder: 'APEX Code',
            default: 'Debug',
            options: ['None', 'Error', 'Warn', 'Info', 'Debug', 'Fine', 'Finer', 'Finest'],
            description: 'The log category level for Apex code. Includes information about Apex code. Can also include log messages generated by data manipulation language (DML) statements, inline SOQL or SOSL queries, the start and completion of triggers, the start and completion of test methods, and so on.',
        },
        apexProfiling: {
            placeHolder: 'Profiling',
            default: 'None',
            options: ['None', 'Info', 'Debug', 'Fine', 'Finest'],
            description: 'The log category level for profiling information. Includes cumulative profiling information, such as the limits for your namespace, the number of emails sent, and so on.',
        },
        callout: {
            placeHolder: 'Callouts',
            default: 'Info',
            options: ['None', 'Info', 'Finest'],
            description: 'The log category level for callouts. Includes the request-response XML that the server is sending and receiving from an external Web service. The request-response XML is useful when debugging issues related to SOAP API calls.',
        },
        database: {
            placeHolder: 'Database/DML',
            default: 'Info',
            options: ['None', 'Info', 'Finest'],
            description: 'The log category for database activity. Includes information about database activity, including every DML statement or inline SOQL or SOSL query.',
        },
        validation: {
            placeHolder: 'Validation',
            default: 'Info',
            options: ['None', 'Info'],
            description: 'The log category level for validation rules. Includes information about validation rules, such as the name of the rule, or whether the rule evaluated true or false.',
        },
        visualforce: {
            placeHolder: 'VisualForce',
            default: 'Fine',
            options: ['None', 'Info', 'Fine', 'Finest'],
            description: 'The log category level for Visualforce. Includes information about Visualforce events, including serialization and deserialization of the view state or the evaluation of a formula field in a Visualforce page.',
        },
        workflow: {
            placeHolder: 'Workflow',
            default: 'None',
            options: ['None', 'Error', 'Warn', 'Info', 'Debug', 'Fine', 'Finer', 'Finest'],
            description: 'The log category level for workflow rules. Includes information for workflow rules, such as the rule name and the actions taken.',
        },
        system: {
            placeHolder: 'System',
            default: 'Info',
            options: ['None', 'Info', 'Debug', 'Fine'],
            description: 'The log category level for calls to all system methods, such as the System.debug method.',
        }
    };

    private readonly customDebugLevelKey = 'customDebugLevel_v1';
    private readonly customDebugLevelMax = 5;

    private readonly noneTraceFlags: SalesforceDebugLevel = {
        apexCode: 'None',
        apexProfiling: 'None',
        callout: 'None',
        database: 'None',
        validation: 'None',
        visualforce: 'None' ,
        workflow: 'None',
        system: 'None',
    };

    /**
     * Predefined log levels
     */
    private readonly debugLevelOptions : Array<vscode.QuickPickItem & { debugLevel?: SalesforceDebugLevel }> = [
        { label: 'User Debug', description: 'Only log user debug statements', debugLevel: { ...this.noneTraceFlags, apexCode: 'Debug' } },
        { label: 'User Debug with Limits', description: 'User debug statements and details on consumed govern limits', debugLevel: { ...this.noneTraceFlags, apexCode: 'Debug', apexProfiling: 'Finest' } },
        { label: 'User Debug with DML', description: 'User debug statements and executed DML', debugLevel: { ...this.noneTraceFlags, apexCode: 'Debug', database: 'Finest' } },
        { label: 'Fine', description: 'All log levels set to FINE', debugLevel: { ...this.noneTraceFlags, apexCode: 'Fine', apexProfiling: 'Fine', system: 'Fine', workflow: 'Fine', callout: 'Info', validation: 'Info', visualforce: 'Fine' } },
        { label: 'Finest', description: 'All log levels set to FINEST', debugLevel: { ...this.noneTraceFlags, apexCode: 'Finest', apexProfiling: 'Finest', system: 'Info', workflow: 'Finer', callout: 'Finest', validation: 'Info', visualforce: 'Finest' } },
        { label: 'Custom', description: 'Set your own trace flags' }
    ];

    private readonly clearDebugOptions : Array<vscode.QuickPickItem & { clear: string }> = [
        { label: 'Clear current user trace flags', description: 'Clear trace flags and disable debug logging for the current user', clear: 'user' },
        { label: 'Clear current users trace flags (org)', description: 'Delete **all** active and expired trace flags from the org', clear: 'all' },
    ];

    private readonly clearCustomFlagsOption : vscode.QuickPickItem & { clear: string } = { 
        label: 'Clear custom debug configurations', description: 'Delete all custom debug flag configurations from VSCode', clear: 'customFlags' 
    };

    private traceFlagsWatcherId: any;
    private currentTraceFlagsId: string;
    private currentDebugLevel: SalesforceDebugLevel;
    private readonly traceFlagsDuration = 300;

    /**
     * Clears all developer logs.
     */
    public async execute() {
        const customDebugLevelOptions = this.getCustomDebugLevels()?.map(level => ({ label: level.name, debugLevel: level}));
        const debugLevelOptions: Array<{ label: string, debugLevel?: SalesforceDebugLevel & { name?: string }, clear?: string }> = [ 
            ...this.debugLevelOptions, 
            ...(customDebugLevelOptions?.length ? [ { label: '', kind: vscode.QuickPickItemKind.Separator }, ...customDebugLevelOptions ] : []),
            { label: '', kind: vscode.QuickPickItemKind.Separator },
            ...this.clearDebugOptions
        ];

        if (customDebugLevelOptions?.length) {
            debugLevelOptions.push(this.clearCustomFlagsOption);
        }

        const traceFlagsSelection = await vscode.window.showQuickPick(debugLevelOptions, { placeHolder: 'Select Debug Level for logging...' });
        if (!traceFlagsSelection) {
            return;
        }

        if (this.traceFlagsWatcherId) {
            clearInterval(this.traceFlagsWatcherId);
        }

        if (traceFlagsSelection.clear === 'user') {
            return this.vlocode.withActivity(traceFlagsSelection.label, () => this.salesforce.logs.clearUserTraceFlags());
        } else if (traceFlagsSelection.clear === 'all') {
            return this.vlocode.withActivity(traceFlagsSelection.label, () => this.salesforce.logs.clearAllTraceFlags());
        } else if (traceFlagsSelection.clear === 'customFlags') {
            return this.deleteAllCustomDebugLevels();
        }

        const debugLevelFlags = traceFlagsSelection.debugLevel ?? await this.getCustomDebugLevel();
        if (!debugLevelFlags) {
            return;
        }

        return this.vlocode.withActivity({
            activityTitle: `Set log level ${debugLevelFlags.name ?? traceFlagsSelection.label}`, 
            progressTitle: `Setting log level to: ${debugLevelFlags.name ?? traceFlagsSelection.label}`,
            location: vscode.ProgressLocation.Notification,
            propagateExceptions: true,
            cancellable: false
        }, async () => {
            // Clear existing trace flags and stop extending them
            if (this.traceFlagsWatcherId !== undefined) {
                clearInterval(this.traceFlagsWatcherId);
            }

            // Clear trace old flags
            await this.salesforce.logs.clearUserTraceFlags();

            // Set debug level
            const debugLevelName = debugLevelFlags.name ?? `Vlocode: ${traceFlagsSelection.label}`;
            const developerName = debugLevelName.replace(/[^0-9a-z_]+/ig, '_').replace(/^_+|_+$/, '');
            const debugLevel = await this.salesforce.logs.createDebugLevel(developerName, debugLevelFlags!);

            this.currentDebugLevel = debugLevelFlags;
            this.currentTraceFlagsId = await this.salesforce.logs.setTraceFlags(debugLevel, 'USER_DEBUG', undefined, this.traceFlagsDuration);

            void vscode.window.showInformationMessage(`Successfully updated Salesforce log levels to: ${traceFlagsSelection.label}`);

            // Keep trace flags active extend with 5 min each time; this esnures trace flags are removed once vscode is closed
            this.traceFlagsWatcherId = setInterval(this.traceFlagsWatcher.bind(this), (this.traceFlagsDuration - 60) * 1000);            
        });
    }

    private async getCustomDebugLevel(): Promise<SalesforceDebugLevel & { created: number, name: string } | undefined> {
        const traceFlags: any = {};
        for (const [field, info] of Object.entries(this.logLevelOptions)) {
            // Create options list
            const options = info.options.map(o => ({ label: o, isDefault: info.default === o }));
            const defaultIndex = options.findIndex(o => o.isDefault);
            if (defaultIndex >= 0) {
                options.unshift(...options.splice(defaultIndex, 1));
            }
            options[0] = { ...options[0], description: '(default)' };

            // Ask user to select any of the options from the list
            const selected = await vscode.window.showQuickPick(options, { placeHolder: `Select level for ${info.placeHolder}` });
            if (!selected) {
                return;
            }
            traceFlags[field] = selected.label;
        }

        const logLevelName = await vscode.window.showInputBox({ 
            value: `Custom ${moment().format('M/D/YYYY HH:mm:ss')}`, 
            title: `Debug Flags Name`, 
            prompt: 'Name displayed in the debug level selection in vscode.'
        });
        if (!logLevelName) {
            return;
        }
        return this.storeAsCustomDebugLevel(logLevelName, traceFlags);
    }

    private storeAsCustomDebugLevel(name: string, debugLevel: SalesforceDebugLevel) {
        const customDebugLevels = this.getCustomDebugLevels();
        const customDebugLevel = Object.assign(debugLevel, { name, created: Date.now() });
        const updatedDebugLevels = [ ...(customDebugLevels?.slice(0, this.customDebugLevelMax - 1) ?? []), customDebugLevel ];
        getContext().globalState.update(this.customDebugLevelKey, updatedDebugLevels);
        return customDebugLevel;
    }

    private getCustomDebugLevels() {
        const customLevels = getContext().globalState.get<Array<SalesforceDebugLevel & {name: string, created: number }>>(this.customDebugLevelKey);
        return customLevels?.sort((a,b) => b.created - a.created);
    }

    private deleteAllCustomDebugLevels() {
        getContext().globalState.update(this.customDebugLevelKey, undefined);
    }

    public async traceFlagsWatcher() {
        if (this.currentTraceFlagsId) {
            this.logger.debug(`Extending active trace flags (${this.currentTraceFlagsId}) with ${this.traceFlagsDuration} seconds`);
            await this.salesforce.logs.extendTraceFlags(this.currentTraceFlagsId, this.traceFlagsDuration);
        }
    }
}