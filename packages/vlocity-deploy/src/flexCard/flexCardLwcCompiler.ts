
import { SalesforceService, SalesforcePackage, LightningComponentBundle } from '@vlocode/salesforce';
import { injectable, Logger } from '@vlocode/core';
import { VlocityNamespaceService } from '@vlocode/vlocity';
import { cache, Timer, XML } from '@vlocode/util';
import { FlexCardDesigner } from './flexCardDesignerUtil';
import { FlexCardDefinition, FlexCardDefinitionAccess } from './flexCardDefinition';
import { DateTime } from 'luxon';

interface CompiledResource {
    name: string,
    source: string
}

export interface FlexCardCompileOptions { 
    lwcName?: string, 
    apiVersion?: string,
    useStandardRuntime?: boolean
}

/**
 * Compiler that transforms activated OmniScripts into LWC components that can easily be deployed or written to the disk.
 */
@injectable.transient()
export class FlexCardLwcCompiler {

    constructor(
        private readonly salesforceService: SalesforceService,
        private readonly cardAccess: FlexCardDefinitionAccess,
        private readonly namespaceService: VlocityNamespaceService,
        private readonly logger: Logger
    ) {

    }

    @cache({ ttl: 60, scope: 'instance' })
    private async initializeLwcGenerator() { 
        // This method is cached to only load card and LWC data once per 60 seconds
        this.logger.verbose('Initializing LWC Flex Card Compiler'); 
        const timer = new Timer();
        const deployedLwcBundles = await this.getDeployedLwcBundles();
        const cards = await this.cardAccess.getFlexCardDefinitions();
        this.logger.info(`Pre-loaded ${cards.size} Flex Cards and ${deployedLwcBundles.length} LWC bundles in ${timer.stop()}`); 

        FlexCardDesigner.nsPrefix = this.namespaceService.getNamespace();
        FlexCardDesigner.isInsidePackge = FlexCardDesigner.nsPrefix !== '';        
        FlexCardDesigner.allLwcBundles = deployedLwcBundles;
        FlexCardDesigner.childCards = [...cards.values()].filter(card => card.IsChildCard === true);
        return FlexCardDesigner;
    }

    /**
     * Compiles an OmniScript into LWC components
     * @param scriptDefinition Definition of the OmniScript to compile
     * @param options Options to control the compilation
     * @returns 
     */
    public async compile(card: FlexCardDefinition, options?: FlexCardCompileOptions): Promise<{ name: string, resources: Array<CompiledResource> }> {
        // Get the name of the component or generate it and compile the OS
        const compiler = await this.initializeLwcGenerator();
        compiler.isStdRuntime = !!options?.useStandardRuntime;
        compiler.defaultXmlConfig.api = Number(options?.apiVersion ?? this.salesforceService.getApiVersion());
        const name = options?.lwcName ?? this.getLwcName(card);
        const files = compiler.generateLWCFiles(name, card, 'card', null, null);
        return { 
            name: name, 
            resources: files
                .filter(({ filepath }) => filepath.includes('/'))
                .map(file => ({
                    name: file.filepath,
                    source: file.source,
                })
            )
        };
    }

    /**
     * Compile an OmniScript into a deployable Salesforce Tooling record
     * @param scriptDefinition Definition of the OmniScript to compile
     * @param options Options to control the compilation
     * @returns 
     */
    public async compileToToolingRecord(card: FlexCardDefinition, options?: FlexCardCompileOptions) {
        // Get the name of the component or generate it and compile the OS
        const { name: componentName, resources } = await this.compile(card, options);

        const componentMetaDefinition = resources.find(r => r.name.endsWith('.js-meta.xml'));
        if (!componentMetaDefinition) {
            throw new Error(`LWC compiler did not generate a .js-meta.xml file for ${componentName}`);
        }

        const { LightningComponentBundle: componentDef } = XML.parse(componentMetaDefinition.source);
        const targetConfigs = XML.stringify(componentDef.targetConfigs, undefined, { headless: true });

        const toolingMetadata = {
            apiVersion: componentDef.apiVersion,
            lwcResources: {
                lwcResource: resources.filter(f => !f.name.endsWith('.js-meta.xml')).map(res => ({
                    filePath: res.name,
                    source: Buffer.from(res.source, 'utf-8').toString('base64')
                }))
            },
            capabilities: {
                capability: []
            },
            isExposed: componentDef.isExposed,
            description: componentDef.description ?? `Autogenerated LWC by Vlocode for Omni FlexCard ${card.Name} (${DateTime.now().toString()})`,
            masterLabel: !card.IsActive ? `${card.Name} (disabled)` : `FlexCard: ${card.Name} (v${card.VersionNumber})`,
            runtimeNamespace: componentDef.runtimeNamespace ?? null,
            targets: componentDef.targets ?? null,
            targetConfigs: targetConfigs ? Buffer.from(targetConfigs, 'utf-8').toString('base64') : null
        }

        return {
            FullName: componentName,
            Metadata: toolingMetadata
        };
    }

    /**
     * Compile and package an OmniScript into a deployable Metadata package
     * @param scriptDefinition Definition of the OmniScript to compile
     * @param options Options to control the compilation and bundling
     * @returns 
     */
    public async compileToPackage(card: FlexCardDefinition, options?: FlexCardCompileOptions) {
        const compiledBundle = await this.compile(card, options);
        const sfPackage = new SalesforcePackage(options?.apiVersion ?? this.salesforceService.getApiVersion());

        for (const source of compiledBundle.resources) {
            sfPackage.add({
                componentType: 'LightningComponentBundle',
                componentName: compiledBundle.name,
                packagePath: source.name,
                data: source.source
            });
        }

        return sfPackage;
    }

    /**
     * Generated the LWC component name from the OmniScript definition
     * @param scriptDefinition Definition of the OmniScript for which to generate the name
     */
    public getLwcName(card: FlexCardDefinition) {
        const cardName = card.IsActive ? card.Name : [card.Name, (card.VersionNumber ?? 'legacy'), card.AuthorName].join('_');
        return FlexCardDesigner.convertNameToValidLWCCase(`${FlexCardDesigner.lwcPrefix}-${cardName}`);
    }

    private async getDeployedLwcBundles() {
        const connection = await this.salesforceService.getJsForceConnection();
        return connection.query2<LightningComponentBundle>(
            'SELECT Id, DeveloperName, NamespacePrefix, ApiVersion FROM LightningComponentBundle',
            { type: 'tooling' }
        );
    }
}
