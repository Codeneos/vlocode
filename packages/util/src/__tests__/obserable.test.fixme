import 'jest';
import * as observable from '../observer';
import { ArrayChangedEventArgs, PropertyChangedEventArgs } from '../observer';

describe('observable', () => {

    describe('#object.get', () => {
        it('should work transparently for caller', () => {
            const target = { 'prop': 'a' };
            const observer = observable.observeObject(target);
            expect(observer.prop).toEqual(target.prop);
        });
    });

    describe('#object.set', () => {
        it('should work transparently for caller', () => {
            const target = { 'prop': 'a' };
            const observer = observable.observeObject(target);
            observer.prop = 'b';
            expect(target.prop).toEqual('b');
        });
        it('should trigger onPropertyChangedEvent', () => {
            const target = { 'prop': 'a' };
            const eventArgs : PropertyChangedEventArgs[] = [];
            const observer = observable.observeObject(target);
            observer.onPropertyChanged(e => eventArgs.push(e));

            observer.prop = 'b';

            expect(eventArgs.length).toEqual(1);
            expect(eventArgs[0].newValue).toEqual('b');
            expect(eventArgs[0].oldValue).toEqual('a');
            expect(eventArgs[0].property).toEqual('prop');
        });
        it('should trigger onPropertyChangedEvent for child objects', () => {
            const target = { 'prop': { 'prop': 'a' } };
            const eventArgs : PropertyChangedEventArgs[] = [];
            const observer = observable.observeObject(target);
            observer.onPropertyChanged(e => eventArgs.push(e));

            observer.prop.prop = 'b';

            expect(eventArgs.length).toEqual(1);
            expect(eventArgs[0].newValue).toEqual('b');
            expect(eventArgs[0].oldValue).toEqual('a');
            expect(eventArgs[0].property).toEqual('prop');
        });
    });
});

describe('observableArray', () => {

    describe('#array.push', () => {
        it('should work transparently for caller', () => {
            const target = new Array<number>();
            const arrayObserver = observable.observeArray(target);
            expect(arrayObserver.push(1)).toEqual(1);
            expect(arrayObserver.push(2)).toEqual(2);
            expect(arrayObserver.length).toEqual(2);
            expect(arrayObserver.push(3, 4)).toEqual(4);
            expect(target).toEqual([1,2,3,4]);
        });
        it('should trigger onArrayChangedEvent', () => {
            const target = new Array<number>();
            const eventArgs = new Array<ArrayChangedEventArgs<number>>();
            const arrayObserver = observable.observeArray(target);
            arrayObserver.onArrayChanged(e => eventArgs.push(e));

            arrayObserver.push(1);

            expect(eventArgs.length).toEqual(1);
            expect(eventArgs[0].newValues?.[0]).toEqual(1);
            expect(eventArgs[0].oldValues).toEqual(undefined);
            expect(eventArgs[0].index).toEqual(0);
        });
    });

    describe('#array.pop', () => {
        it('should work transparently for caller', () => {
            const target = [1,2,3,4];
            const arrayObserver = observable.observeArray(target);
            expect(arrayObserver.pop()).toEqual(4);
            expect(arrayObserver.pop()).toEqual(3);
            expect(arrayObserver.length).toEqual(2);
        });
        it('should trigger onArrayChangedEvent', () => {
            const target = [1,2];
            const eventArgs = new Array<ArrayChangedEventArgs<number>>();
            const arrayObserver = observable.observeArray(target);
            arrayObserver.onArrayChanged(e => eventArgs.push(e));

            arrayObserver.pop();

            expect(eventArgs.length).toEqual(1);
            expect(eventArgs[0].newValues).toEqual(undefined);
            expect(eventArgs[0].oldValues?.[0]).toEqual(2);
            expect(eventArgs[0].index).toEqual(1);
        });
    });

    describe('#array.shift', () => {
        it('should work transparently for caller', () => {
            const target = [1,2,3,4];
            const arrayObserver = observable.observeArray(target);
            expect(arrayObserver.shift()).toEqual(1);
            expect(arrayObserver.shift()).toEqual(2);
            expect(arrayObserver.length).toEqual(2);
        });
        it('should trigger onPropertyChangedEvent', () => {
            const target = [1,2];
            const eventArgs = new Array<ArrayChangedEventArgs<number>>();
            const arrayObserver = observable.observeArray(target);
            arrayObserver.onArrayChanged(e => eventArgs.push(e));

            arrayObserver.shift();

            expect(eventArgs.length).toEqual(1);
            expect(eventArgs[0].newValues).toEqual(undefined);
            expect(eventArgs[0].oldValues?.[0]).toEqual(1);
            expect(eventArgs[0].index).toEqual(0);
        });
    });
});
