# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0

commands:
  checkout_install:
    steps:
      - checkout
      - run:
          name: Install package manager
          command: | 
            sudo corepack enable 
            sudo corepack install
      - restore_cache:
          keys:
          - pnpm-store-{{ checksum "pnpm-lock.yaml" }}
      - run: pnpm config set store-dir ~/.pnpm-store
      - run:
          name: Install deps
          command: |
            sudo apt update
            sudo apt-get install -y libsecret-1-dev
      - run: pnpm install --frozen-lockfile
      - save_cache:
          key: pnpm-store-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - ~/.pnpm-store
  test:
    steps:
      - run: pnpm jest --ci --verbose -i
      - store_test_results:
          path: coverage/junit.xml
      - store_artifacts:
          path: coverage/sonar-report.xml
      - store_artifacts:
          path: coverage/lcov.info
  codequality:
    steps:
      - run: pnpm lint -o eslint-report.json --format json || true
      - sonarcloud/scan
  build:
    steps:
      - run: pnpm build
  pack_extension:
    steps:
      - get_version
      - run:
          name: "Pack extension"
          command: |
            VERSION=$(cat .version)
            [[ $VERSION =~ "-" ]] && PRERELEASE="--pre-release" || PRERELEASE=""
            # When VERSION contains a hyphen it's a semver prerelease (e.g. 1.2.0-beta.1) and we pass --pre-release so VSCode Marketplace marks it as Preview
            echo "Packing extension version $VERSION ${PRERELEASE:+(pre-release)}"
            pnpm pack-extension ${PRERELEASE}
      - persist_to_workspace:
          root: .
          paths: [ "packages/vscode-extension/*.vsix" ]
  get_version:
    steps:
      - run:
          name: Get Version
          command: |
            VERSION=$(node -p "require('./lerna.json').version")
            # Mark prerelease when version contains a hyphen (e.g. 1.2.3-beta.0); CircleCI run steps are isolated so we persist only the version
            [[ $VERSION =~ "-" ]] && echo "Detected pre-release version ${VERSION}" || echo "Detected release version ${VERSION}"
            echo ${VERSION} > .version
      - persist_to_workspace:
          root: .
          paths: [ ".version" ]
  release_notes:
    steps:
      - run:
          name: Get Release Notes
          command: |
            node -e "fs.writeFileSync('./release-notes.md', fs.readFileSync('./CHANGELOG.md').toString().match(/(##? \[(.*?))## \[/s)[1])"
            NOTES=$(cat ./release-notes.md)
      - persist_to_workspace:
          root: .
          paths: [ "release-notes.md" ]
      - store_artifacts:
          path: release-notes.md

jobs:
  build-and-test:
    docker:
      - image: cimg/node:lts-browsers
    steps:
      - checkout_install
      - build
      - test
      - codequality
  package:
    docker:
      - image: cimg/node:lts-browsers
    steps:
      - checkout_install
      - pack_extension
      - release_notes
  publish-vsc-extension:
    docker:
      - image: cimg/node:lts-browsers
    steps:
      - checkout_install
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish extension on VSCode Marketplace"
          command: |
            VERSION=$(cat ./artifacts/.version)
            [[ $VERSION =~ "-" ]] && PRERELEASE="--pre-release"
            pnpx vsce publish -p "$VSCE_TOKEN" ${PRERELEASE} --packagePath "./artifacts/packages/vscode-extension/vlocode-${VERSION}.vsix"
  publish-npm-packages:
    docker:
      - image: cimg/node:lts-browsers
    steps:
      - checkout_install
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run: pnpm run --filter @vlocode/* build
      - run:
          name: "Publish npm packages (stable or beta)"
          command: |
            VERSION=$(node -p "require('./lerna.json').version")
            if [[ $VERSION =~ '-' ]]; then
              echo "Detected prerelease version ${VERSION}; publishing with dist-tag 'beta'"
              pnpm lerna publish from-package --dist-tag beta --force-publish --no-push --yes
            else
              echo "Detected stable version ${VERSION}; publishing with default 'latest' tag"
              pnpm lerna publish from-package --force-publish --no-push --yes
            fi
  github-release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=$(cat ./artifacts/.version)
            NOTES=$(cat ./artifacts/release-notes.md)
            [[ $VERSION =~ "-" ]] && PRERELEASE="--pre-release"
            ghr ${PRERELEASE} \
              -t ${GITHUB_TOKEN} \
              -b "${NOTES}" \
              -n "Version ${VERSION}" \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -delete v${VERSION} \
              ./artifacts/packages/vscode-extension/vlocode-${VERSION}.vsix

workflows:
  validate:
    jobs:
      - build-and-test:
          context: sonarcloud
  release:
    jobs:
      - package:
          context: vsce
          filters: &filters-publish
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - github-release:
          context: github
          filters: *filters-publish
          requires:
            - package
      - publish-approval:
          type: approval
          filters: *filters-publish
          requires:
            - package
            - github-release
      - publish-vsc-extension:
          context: vsce
          filters: *filters-publish
          requires:
            - publish-approval
      - publish-npm-packages:
          context: npm
          filters: *filters-publish
          requires:
            - publish-approval
